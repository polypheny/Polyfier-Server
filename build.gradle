import org.jetbrains.gradle.ext.Application

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: lombok_version
        classpath group: "com.adarshr", name: "gradle-test-logger-plugin", version: gradle_test_logger_version
        classpath group: "org.reflections", name: "reflections", version: reflections_version
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.31"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.1"
}

allprojects {
    version = versionMajor + "." + versionMinor + "." + versionMicro
    isRelease = isRelease.toBoolean()
    if (!isRelease) {
        version = version + "-SNAPSHOT"
    }

    buildscript {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    apply plugin: "java-library"
    apply plugin: "io.freefair.lombok"

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = "UTF-8"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://clojars.org/repo/"
        }
        maven {
            // DBIS Nexus
            url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }

    test {
        useJUnitPlatform()
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            inheritOutputDirs = false
            outputDir = file("${project.buildDir}/classes")
            testOutputDir = file("${project.buildDir}/test-classes")

            generatedSourceDirs += file("${project.buildDir}/generated-sources")
            generatedSourceDirs += file("${project.buildDir}/generated-test-sources")
        }
    }
}


idea {
    project {
        settings {
            runConfigurations {
                "Polyfier-Server"(Application) {
                    mainClass = 'PolyfierServer'
                    moduleName = getProject().idea.module.name + ".server.main"
                }
                "Polyfier-Server (reset)"(Application) {
                    mainClass = 'PolyfierServer'
                    moduleName = getProject().idea.module.name + ".server.main"
                    // Parameters programParameters = '-resetCatalog'
                }
            }
            copyright {
                useDefault = "ApacheLicense"
                profiles {
                    ApacheLicense {
                        notice = 'Copyright 2019-$today.year The Polypheny Project\n' +
                                '\n' +
                                'Licensed under the Apache License, Version 2.0 (the \"License\");\n' +
                                'you may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n' +
                                '\n' +
                                'http://www.apache.org/licenses/LICENSE-2.0\n' +
                                '\n' +
                                'Unless required by applicable law or agreed to in writing, software\n' +
                                'distributed under the License is distributed on an \"AS IS\" BASIS,\n' +
                                'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                                'See the License for the specific language governing permissions and\n' +
                                'limitations under the License.'
                        keyword = "Copyright"
                    }
                }
            }
        }
    }
}
